一．线程编程(Thread)
１．什么是线程
  [1] 线程被称为轻量级的进程；
  [2] 线程可以使用计算机多核资源，是多任务编程方式；
  [3] 线程是系统分配内核的最小单元；
  [4] 线程可以理解为进程的分支任务．

２．线程特征
  [1] 一个进程中可以包含多个线程；
  [2] 线程也是一个运行状态，有生命周期，消耗计算机资源；
  [3] 进程中的所有线程共享这个进程的资源；
  [4] 多个线程之间执行互不影响；
  [5] 线程的创建和销毁消耗的资源远远小于进程；
  [6] 各个线程有自己的特征，命令集，空间代码块等；

３．创建线程－－threading模块
  [1] 创建线程对象
  from threading import Thread

  t = Thread()
  功能：创建线程对象
  参数：target 绑定线程函数
  　　　args 元组，给线程函数位置传参
  　　　kwargs 字典，给线程函数关键字传参
  [2] 启动线程
  t.start()

  [3] 回收线程
  t.join([timeout])

４．线程对象属性
  t.name 线程名称
  t.setName() 设置线程名称
  t.getName() 获取线程名称
  t.is_alive() 是否在生命周期
  t.daemon 设置主线程和分支线程的退出关系
  t.setDaemon() 设置daemon属性值
  t.isDaemon 查看属性值状态

  *设置为True时，主线程结束，分支线程也会结束．
  daemon=True 通常不会和join()一起使用.

５．自定义线程类
  [1] 创建线程类
  1.继承Thread
  2.重写__init__方法添加属性，使用super加载父类init
  3.重写run方法作为启动方法

  [2] 使用方法
  1.实例化对象
  2.调用start自动执行run方法，运行线程
  3.调用join回收线程

二．线程通信
  [1] 通信方法：线程间使用全局变量进行通信；

  [2] 共享资源的争夺
  1.共享资源：多个进程或线程都可以操作的资源为共享资源，对共享资源实施操作的代码为临界区
  2.影响：对共享资源的无序操作可能会带来数据混乱，或者操作失误，此时往往需要同步互斥机制协调操作顺序．

  [3] 同步互斥
  同步：同步是一种协作关系，为完成操作，多进程或者线程形成一种协调，按照必要的步骤有序执行．
  互斥：互斥是一种制约关系，当一个进程或者线程占有资源时会进行加锁处理，此时其他进程或者线程就无法操作，直到解锁后才能操作．

  [4] 线程同步互斥
  1.　线程Event
  from threading import Event

  e = Event() 创建线程event对象
  e.waid([timeout]) 阻塞等待e被set
  e.set() 设置e，使wait结束阻塞
  e.clear() 清除e的设置状态
  e.is_set() 查看当前e是否被设置

  2. 线程锁　Lock
  from threading import Lock
  lock = Lock() 创建锁对象
  lock.acquire() 上锁　如果lock已经上锁则阻塞
  lock.release() 解锁

  with lock:  上锁
  ...
             当with 代码块结束，自动解锁

三．python线程的GIL问题(全局解释器锁)
1. 什么是GIL:global interpreter lock
  由于python解释器设计中加入了解释器锁，导致python解释器同一时刻只能解释一个线程，大大降低了线程的执行效率．

2. 影响：python多线程在执行计算密集型或者几乎无阻塞的IO操作时并不能提高程序效率，但是在高延迟IO操作中，遇到
　　　　　阻塞线程会自动让出解释器，还是可以提高程序效率的．

3. GIL问题建议：
  *尽量使用进程完成无阻塞的并发行为；
  *不使用c作为解释器(jave  c#)；

1.效率测试：test.py
结论：
在无阻塞情况下，多线程程序和单线程程序执行效率接近，甚至不如单线程效率，但是多进程可以明显提高程序运行效率．


2.对比进程线程特点区别
[1] 两者都是多任务编程方式，都能使用计算机多核资源
[2] 进程的创建删除消耗的计算机资源比线程多
[3] 进程空间独立，互不干扰，有专门的通信方法，线程使用全局变量通信，共享进程空间
[4] 一个进程可以有多个分支线程，两者有包含关系
[5] 进程线程都存在共享资源操作，但是线程这种情况更多，需使用同步互斥方法处理
[6] 进程线程在系统中都有自己的特征属性，如ID，命令集等

３．使用情形
[1] 任务场景：如果是一个任务中的不同分支，优先线程；如果是多个独立任务(比如前后端分离)，可能用多进程
[2] 项目结构：多种编程语言实现不同任务模块往往是多进程
[3] 语言特点，难易程度：python线程效率低，高延迟IO可以用线程，计算程序用进程．多进程通信成本高，或者多线程同步互斥处理复杂，则可能用另外一种．

面试要求:
１．对进程线程怎么理解，说说对进程线程的认识
２．进程间通信都知道哪些，有什么特点．
３．什么是同步互斥，什么情况下使用
４．python线程效率低，怎么办
５．僵尸进程怎么处理
６．给一个情形，问怎么用进程／线程处理