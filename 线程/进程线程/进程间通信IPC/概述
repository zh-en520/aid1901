一．进程间通信(IPC)
１．必要性
  [1] 进程空间独立，资源不能共享，此时需要在进程间数据传输时用特定的手段进行数据通信．

２．进程间通信方法：管道，消息队列，共享内存，信号，信号量，套接字．

３．管道通信(Pipe)
  [1] 通信原理：在内存中开辟管道空间，生成管道操作对象，多个进程使用同一管道对象
  　　　　　　　进行读写操作即可实现通信．
  [2] 实现方法：
  from multiprocessing import Pipe

  fd1,fd2 = Pipe(duplex = True)
  功能：创建管道
  参数：默认表示双向管道，如果为False表示单向管道
  返回值：表示管道的两端读写对象，如果是双向管道则都可以读写操作，单向管道则fd1只读，fd2只写

  fd.recv()
  功能：从管道读取内容
  返回值：返回获取的数据

  fd.send(data)
  功能：向管道写入内容
  参数：要写入的数据

４．消息队列
  [1] 通信原理：在内存中建立队列模型，进程通过队列将消息存入，或者从队列中取出，完成进程间通信．

  [2] 实现方法：
  from multiprocessing import Queue

  q = Queue(maxsize=0)
  功能：创建队列对象
  参数：最多存放的消息个数
  返回值：队列对象

  q.put(data,[block,timeout])
  功能：向队列存入消息
  参数：data存入内容
  　　　block = False 表示非阻塞
  　　　timeout 为超时时间

  q.get([block,timeout])
  功能：从队列取出消息
  参数：Block = False 设置非阻塞
  　　　timeout 超时时间
  返回值：取出的内容

  q.full() 判断队列是否为满
  q.empty() 判断队列是否为空
  q.qsize() 获取队列中消息数量
  q.close() 关闭队列

  作业：
  １．multiprocessing完成，创建两个子进程，同时分别复制一个文件的上下两部分，各自将复制内容写入到一个新文件中．
  ２．整理聊天室代码思路
  ３．复习Mysql基本语句



二．进程间通信（序）
由昨天作业引申出的思考：
注意：
＊如果在父进程中创建对象，子进程拷贝父进程对象，此时父子进程对该对象的操作在属性上会相互影响．
＊如果进程在各自空间单独开辟对象，则各个进程的使用互不影响．

１．共享内存
  [1] 通信原理：在内存中开辟一块空间，进程可以写入空间和读取内容，完成通信．每次写入内容会覆盖之前内容．效率高，只能存一个数据．
  
  [2] 实现方法：
  　　from multiprocessing import Value,Array
  　　obj = Value(ctype,data)
  　　功能：开辟共享内容,简单的单一数据
  　　参数：ctype 表示共享内存空间类型 'c' 'i' 'f'
  　　　　　data　共享内存初始化数据
  　　返回：共享内存对象
    obj.Value 对该属性的读写即对共享内存的读写

    obj = Array(ctype,data)
    功能：开辟共享内存空间，存放数组，字符串
    参数：ctype 共享内存数据类型
    　　　data 初始化数据（列表，字符串等）
    　　　　　　整数表示开辟空间大小
    返回值：共享内存对象

    Array共享内存读写：通过遍历obj可以得到每个值，可以通过索引号修改共享内存．

    ＊shm.value 可以打印共享内存字节串．

２．信号量(信号灯集)
  [1] 通信原理：给定一个数量，对多个进程可见．多个进程都可以操作这个数量增减，根据数量值确定自己的行为．

  [2] 实现方法：
    from multiprocessing import Semaphore
    sem = Semaphore(num)
    功能：创建信号量对象
    参数：信号量初始值
    返回值：信号量对象

    sem.acquire() 信号量减１，当信号量为０时会阻塞
    sem.release() 信号量加１
    sem.get_value() 获取信号量数量


