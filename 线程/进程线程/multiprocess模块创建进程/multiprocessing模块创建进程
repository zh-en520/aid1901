一．multiprocessing模块创建进程
１．进程创建流程
　[1] 将需要子进程执行的事件封装为函数；
　[1] 通过模块的process类创建进程对象，关联函数；
　[1] 可以通过进程对象设置进程信息及属性；
　[1] 通过进程对象调用start启动进程；
　[1] 通过进程对象调用join回收进程

２．函数接口使用
　[1] process()
   功能：创建进程对象
   参数：target绑定的目标函数
　　　　　args元组　给target绑定函数按位置传参
　　　　　kwargs字典　给target函数关键字传参
　[1] p.start()
   功能：启动新的进程
   ＊注意事项：此时进程才真正产生，会将target绑定函数作为进程执行内容

　[1] p.join([timeout])
   功能：阻塞等待回收子进程
   参数：超时时间

   注意：
   ＊使用process创建子进程同样是复制父进程的空间代码段，父子进程运行互不影响
   ＊子进程只运行target绑定函数，其余均由父进程执行
   ＊Join如果不回收子进程，子进程可能成为僵尸进程
   ＊multiprocessing模块创建的子进程不能使用标准输入　
   *通常使用Process创建进程，父进程只负责进程创建和回收，子进程负责具体事件执行．

3.进程对象属性
   p.name  进程名称

   p.pid  进程PID号

   p.is_alive()  查看进程是否在生命周期

   p.daemon  设置父子进程的退出关系
    *如果daemon设置为True则子进程会随父进程退出
    *必须在start前设置该属性
    *daemon=True一般不会和join()...死阻塞一同使用

４．自定义进程类
　[1] 作用：当进程功能比较复杂，无法通过一个函数简单实现，又希望将整体功能进行封装．此时可以设计进程类完成．

　[1] 编写流程
   ＊定义进程类继承Process
   ＊编写__init__方法用于添加属性，使用super加载父类__init__，获取父类自动提供的方法．
   ＊重写Process中的run方法作为进程类启动函数
   
　[1] 使用方法
   ＊使用自定义类实例化对象
   ＊通过实例对象调用start()方法创建进程，此时会自动加载运行类中的run()
   ＊实例对象调用join()回收子进程