函数　function
　创建函数：
　def 语句
　调用函数：
　函数名（调用实参）

Ｐython函数参数传递
传递方式：
　１，位置传参
　　１．１　序列传参
　２，关键字传参
　　２．１　字典关键字传参
位置传参：
　实际参数（实参）的对应关系与形式参数（形参）的对应关系按位置来依次对应
示例：
　def mymin(a,b,c):
    pass
 mymin(1,2,3)
 说明：
 　实参和形参通过位置进行传递和匹配
 　实参的个数必须与形参个数相同

 序列传参：
 　序列传参是指在函数调用过程中，用*将序列拆解后按位置进行传递的传参方式
 说明：　
 　序列传参时，序列拆解的位置将与形参一一对应

关键字传参：
　关键字传参是指传参时，按着形参的名称给形参赋值
　实参和形参按名称进行匹配
说明：
　实参和形参按形参名进行匹配，可以不按位置进行匹配

字典关键字传参：
　是指实参为字典，将字典用＊＊拆解后进行关键字传参的传参方式
说明：
　字典的键名和形参名必须一致
　字典的键名必须为符合表示符命名规则的字符串
　字典的键名要在形参中存在

函数的综合传参：
　函数的传参方式，在能确定形参能唯一匹配到相应实参的情况下可以任意组合
　函数的位置传参要先于关键字传参
示例：
 def myfun1(a,b,c):
    pass
 myfun1(100,*[200,300])
 myfun1(*[100,200],300)
 myfun1(*[100],200,*[300])
 myfun1(100,c=300,b=200)
 myfun1(100,**{'c':300},b=200)
以下是错误的传参方式
 myfun1(a=100,b=200,300) #位置传参要放在关键字传参之间
 myfun1(100,**{'c':300},200) #出错

 －－－－－－－－－－－－－－－－－－以下讲函数的定义及函数的形参列表－－－－－－－－－－－－－－－－－－－－－－－
 函数的缺省参数
 　语法：
 def 函数名（形参名１　＝　默认实参１，形参名２　＝　默认实参２....):
    语句块
说明：
　缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则其右侧的所有参数都必须有缺省参数
　缺省参数可以有０个或多个，甚至全部都有缺省参数
示例：
 def fn(a,b=10,c): #错误
    pass
 def fn(a,b,c=10): #正确
    pass
 def fn(a=10,b=2-,c=30): #正确
    pass

练习：
　写一个函数Myadd,此函数可以计算两个数，三个数及四个数的和，如：
　def myadd(...):
 ...
　print(myadd(10,20)) #30
　print(myadd(100,200,300)) #600
　print(myadd(1,2,3,4)) #10
＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋
函数形参的定义方式：
　位置形参
　星号元组形参
　命名关键字形参
　双星号字典形参
位置形参：
　语法：
　def 函数名(形参名１,形参名２...):
　　　语句块:
　示例：def fx(a,b,c):
        pass

星号元组形参：
　语法：
　def 函数名（*元组形参名）：
　　　语句块
　作用：
收集多余的位置传参
　说明：
元组形参名一般命名为'args'

练习：
　写一个函数，mysum可以传入任意个实参的数字，返回所有实参的和，如：
　def mysum(*args)
   ...
  print(mysum(1,2,3,4))
  print(mysum(100,200,300))

命名关键字形参：
　语法：
　def　函数名（*,命名关键字形参１，命名关键字形参２，...）:
      语句块
　或
　def 函数名（＊args,命名关键字形参１，命名关键字形参２，...)：
　　   语句块
作用：
　强制所有的参数都必须用关键字传参或字典关键字传参


双星号字典形参：
　语法：def 函数名(**字典形参名)：
            语句块
　作用：
　收集多余的关键字传参
说明：
　字典形参名一般命名为'kwargs'
　一个函数内字典形参最多只能有一个
＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋
说明：
　位置形参，缺省形参，星号元组形参，双星号字典形参可以混合使用
函数参数自左至右的顺序为：
　位置形参，星号元组形参，命名关键字形参，双星号字典形参
如：
 def fn(a,b,*args,c,d='D',**kwargs):
    pass
 fn(1,2,3,4,5,c='c',d='d',e='e')

练习：
　写一个函数，已知内建函数max的帮助文档为：
max(iterable, *[, default=obj, key=func]) -> value
    max(arg1, arg2, *args, *[, key=func]) -> value
    仿造max,写一个mymax函数，功能与max完全相同，（要求：不允许调用max函数）
    如：
def mymax(...):
    ...
print(mumax([6,8,3,5]))
print(mumax(100,200))
print(mumax(1,3,5,9,7))

可以接收任意位置传参和关键字传参的函数
def fn(*args,**kwargs):
    pass


全局变量与局部变量
局部变量　local variable
定义在函数内部的变量称为局部变量（函数的形参也是局部变量）
局部变量只能在函数内部使用
局部变量在函数调用时才能够被创建，在函数掉应之后自动销毁

全局变量
定义在函数外部，模块内部的变量称为全局变量
全局变量所有函数都可以直接访问（取值），但函数内部不能将变量赋值

局部变量说明：
在函数内部的赋值语句不会对全局变量造成影响
局部变量只能在其被声明的函数内部访问，而全局变量可以在整个模块的范围内访问

globals函数　和　locals函数：
 globals()  返回当前全局作用域内变量的字典
 locals()   返回当前局部作用域内变量的字典

练习：
　１，写一个函数isprime()判断x是否是素数，如果是素数返回true，否则返回false
　２，写一个函数prime_m2n(m,n)返回从m开始，到n结束(不包含n)范围内的素数的列表，并打印这些整数
　如：
　L = prime_m2n(10,20)
　print(L) #[11,13,17,19]
　３，写一个函数primes(n),返回指定范围n以内（不包含n)的素数的列表，并打印
　如：
　L = primes(10)
　print(L) #[2,3,5,7]
　1)打印１００以内的全部素数
　2)打印２００以内的全部素数的和
　４，写一个函数myrange,可以传入１～３个参数，实际意义与range函数完全相同，返回符合range函数规则的列表
　如：
　L = myrange(4)
　print(L) #[0,1,2,3]
　L = myrange(4,6)
　print(L) #[4,5]
　L = myrange(1,10,3)
　print(L) #[1,4,7]
　（可以调用range函数）
　５，修改原＜＜学生信息管理程序＞＞将程序的整体功能封装为两个函数
　１）编写函数input_student()获取学生信息，以学生姓名为空结束输入，返回学生信息的字典的列表，列表同之前列表
　如：
　L = input_student()
　print(L) #[{'name':'xiaozhang',...},{...}]
　2)编写函数output_student(L)　以表格的形式打印L列表中的学生信息
　如：
　output_student(L)  #打印表格