汉字编码：
二种：
GB系列（ＧＢ系列（ＧＢＫ（ＧＢ２３１２））
ＵＮＩＣＯＤＥ系列（ＵＮＩＣＯＤＥ３２（ＵＮＩＣＯＤＥ１６））
　　　＇ＵＴＦ－８＇　存储和传输ＵＮＩＣＯＤＥ的一种方式
编码字符串：
'gbkb2312','gbk','gb18030','utf-8','ascii'
编码注释：
#-*- coding:utf-8 -*-

day17

                 面向对象编程Object-Oriented Programming
什么是对象：(object)
对象是指现实中的物体或实体
什么是面向对象：
把一切看成对象(实例)，用各种对象之间的关系来描述事物
对象都有什么特征：
对象有很多属性（名词，形容词）：姓名，年龄，性别，肤色．．
对象有很多行为：学习，吃饭，睡觉，踢球，工作，借钱．．
什么是类(class)：
拥有相同属性和行为的对象分为一组，即为一个类
类是用来描述对象的工具，用类可以创建此类的对象（实例）
示例：
车（类）－－－＞ＢＹＤ　Ｅ６（京Ａ．８８８８８）实例，对象
狗（类）－－－＞小京巴（户籍：０００１）对象
Int(类)－－－＞100/200


               类的创建语句(class语句)
语法：
class类名(继承列表)：
　　'类的文档字符串'
　　实例方法的创建
　　类变量的创建
　　类方法的创建
　　静态方法的创建
作用：
　　创建一个类
　　类用于描述对象的行为和属性
　　类用于创建此类的一个或多个对象(实例)
说明：
　　继承列表可以省略，省略继承列表表示类继承自object类
示例见：
　　class.py


　　　　　　　　　　构造函数：
构造函数的调用表达式：
　　类名([创建传参列表])
作用：
　　创建这个类的实例对象，并返回此实例对象的引用关系
之前用过的类：
列表，元组，字典，集合，frozenset,int,bool,float,complex
示例方法：
语法：
　　class 类名(继承列表)
def 实例方法名(self,参数１,参数２,...)
    '''文档字符串'''
    语句块
作用：
　　用于描述一个对象的行为，让此类型的全部对象都拥有相同的行为
说明：
　　示例方法的实质是函数，是定义在类内的函数
　　实例方法至少有一个形参，第一个形参绑定调用这个方法的实例，一般命名为'self'
实例方法的调用语法：
　　实例.实例方法名(请用传参)
或
　　类名．实参方法名(实例，调用传参)


　　　　　　实例属性　attribute(也叫实例变量)
每个实例都可以有自己的变量，称为实例属性
语法：
　　实例.属性名
属性的赋值规则：
　　首次为属性赋值则创建此属性
　　再次为属性赋值则改变属性的绑定关系
作用：
　　记录每个对象自身的数据
示例见：
　　attribute.py


　　　　　　　　删除实例属性
del 语句
语法：
del 对象．实例属性名
示例：
class Dog:
    pass

dog1 = Dog()
dog1.color = '白色＇
dir(dog.color)
del dog1.color

　　　　　　　格式化方法：
作用：
对新创建的对象添加属性
语法格式：
class 类名(继承列表)：
    def __init__(self[,形参列表]):
        语句块
注：[]代表其中的内容可省略
说明：
初始化方法名必须为__init__不可改变
初始化方法会在构造函数创建实例后自动调用，且将实例自身通过第一个参数self传入__init__方法
构造函数的实参将通过__init__方法的参数列表传入到__init__方法中
初始化方法内如果需要返回，则必须返回Ｎone
示例见：
init_mothod.py



　　　　　　析构方法：
语法：
class 类名(继承列表)：
    def __del__(self):
        ...

作用：
　　析构方法在对象被销毁前被自动调用
　　python语言建议不要在对象销毁时做任何事情，因为销毁的时间难以确定
示例见：
　　del_method.py


任何实例的生命周期：
创建实例---->初始化实例----->使用实例------>销毁前调用析构方法----->


　　　　预置实例属性：
__dict__属性
__dict__属性绑定一个存储此实例自身属性的字典
示例：
class Dog:
    pass
dog1 = Dog()
print(dog1.__dict__)#{}
dog1.kinds = '哈士奇'
print(dog1.__dict__)#{'kinds':'哈士奇'}


       __class__属性：
__class__属性绑定创建此实例的类
作用：
　　可以借助于此属性来访问创建此实例的类
示例：
　　class Dog:
        dog1 = Dog
        print(Dog)
        print(dog1.__class__)
        dog2 = dog1.__class__()＃创建一个与dog1同类的对象
        print(dog2)#<__main__/Dog...at 0x...>


　　　　　　用于类的函数：
isinstance(obj,class_or_tuple)  返回这个对象obj
  是否是某个类的对象或某些类中一个类的对象，如果是返回true
  ,否则返回false
type(obj)返回对象的类
示例见：
x = 100
y = [1,2,3,4]
isinstance(x,int)#true
isinstance(y,int)#false
isinstance(x,(float,str,list)#true
isinstance(x,(float,str,list,int)#true
type(100) is int#true