day 14 笔记
异常　Exception(基础)
 什么是错误：(引发异常的原因)
 　错误是指由于逻辑或语法等导致一个程序无法正常执行的问题
 错误的特点：
 　有些错误无法预知

 什么是异常：(导致异常的结果)
 　异常是程序出错时标识的一种状态
 当异常发生时，程序不会再向下执行，而转去调用此函数的地方待处理此错误并恢复为正常状态
 作用：
 　用作信号，通知上层调用者有错误产生需要处理

try语句：
 两种语法：
  try_except 语句
  try_finally 语句
 try_except 语句
  语法：
   try:
    可能触发异常的语句
   except 错误类型１ [as 变量1]:
    异常处理语句１
   except 错误类型２ [as 变量2]:
    异常处理语句２
   except 错误类型３ [as 变量3]:
    异常处理语句３
    ...
   except:
    异常处理语句（其他）
   else:
    未发生异常语句
   finally:
    最终语句
 作用：
 　尝试捕获异常，将程序由异常流程转为正常流程并继续执行
 说明：
 　as 子句是用于绑定错误对象的变量，可以省略
 　except 子句可以有一个或多个，但至少要有一个
 　else 子句最多只能有一个，

 try_except.py
 try_except_as.py
 try_except3.py
 try_except4.py

 练习：
 写一个函数get_score()来获取学生输入的成绩（０～１００）的整数，如果输入的不是０～１００的整数，则此函数返回０．
 如：
 def get_score():
    s = input('请输入成绩：')
    ...#此处自己实现
    score = get_score
    print('学生的成绩是：',score)


python 全部内置的错误类型
文档参见;python_base_docs_html/python全部的异常类型．html

try_finally 语句
 语法：
 try:
    可能触发异常的语句
 finally:
    最终语句
 说明：
 finally 子句不可以省略
 一定不存在except子句
 作用：
 通常用try-finally语句来做触发异常时必须要处理的事情，无论异常是否发生，finally子句都会被执行
 try_finally语句不会改变程序的(正常／异常)状态



raise 语句
 作用：
 　触发一个错误，让程序进入异常状态
 　发送错误通知给调用者
 语法：
 　raise 异常类型
 ＃或
 　raise 异常对象
 ＃或
 　raise ＃重新触发上一次异常
 示例见：raise.py


assert 语句(断言语句)
 语法：
 　assert 真值表达式,错误数据(通常是字符串)
 作用：
 　当真值表达式为False时，用错误数据创建一个AssertionError类型的错误，并进入异常状态
 等同于：
 　if bool(真值表达式) == False:
       raise AssertionError (错误数据)


异常小结：
 语句有四条：
 　try-except 语句:
   接收异常通知，可以将程序的异常流程转为正常流程
   try-finally 语句：
   执行必须要执行的语句(try-finally并不会改变程序的状态)
   raise 语句：
   发出错误通知给调用者
   assert　语句：
   根据条件选择性的发出AssertError类型的错误通知给调用者
   with 语句：(后面才学)

练习：
 写一个函数get_age()用来获取一个人的年龄信息
 此函数规定用户只能输入1~140之间的整数，如果用户输入其他的数则直接触发ValueError类型的错误！
 如：def get_age():
         ...
    try:
        age = get_age()
        print('用户输入的年龄是：',age)
    except ValueError as err:
        print('用户输入的不是1~140的整数,获取年龄失败!')


迭代器　Iterator
 什么是迭代器
 　迭代器是访问可迭代对象的工具
 　迭代器是指用iter(obj)函数返回的对象(实例)
 　迭代器函数iter和next
 　iter(iterable) 从可迭代对象中返回一个迭代器，iterable必须是一个能提供一个迭代器的对象
 　next(iterable)　从迭代器iterator中获取下一个记录，如果无法获取下一条记录，则触发StopIteration异常
 说明：
 　迭代器只能往前取值，不会后退
 　用iter函数可以迭回一个可迭代对象的迭代器
 示例：
 　L = [1,3,5,7]
  it = iter(L) #从L对象中获取迭代器
  next(it)　＃１　从迭代器中获取一个数据

练习：
1.有一个集合：
　s = {'唐僧','悟空','八戒','沙僧'}
 用for 语句来遍历所有元素如下：
 　for x in s :
        print(x)
   else :
        print('遍历结束')
    请将上面的for语句改写为while语句和迭代器实现
2.一个球从100米高空落下，每次落地后反弹高度为原高度的一半，再落下
　1)写程序算出皮球在低10次落地后反弹多高
　2)打印出共经历多少米路程
3.修改原学生信息管理程序，加入异常处理语句，让程序在任何情况下都能按逻辑正常执行，
　如：
　输入成绩和年龄时，如果输入非法字符也不会导致程序崩溃