day17回顾
面向对象编程OOP(object-oriented programming)
　　支持OOP的语言：
    　C++,Jave,Python,Objective-C,Swift,c#

类
对象：
行为（方法method)
属性（实例属性）
示意：
class Student:
def __init__(self,n,a,s):
    '''chushihua方法'''

def __del__(self):
    '''析构方法'''

def set_score(self,s):

def get_score(self):
    reture set_score

实例方法，用来描述或规定对象能有哪些行为
实例属性，记录每个对象自身的数据（属性）；
　　　　　添加和修改
        obj.attr = 表达式
        删除：
        del obj.attr
初始化方法，__init__(self,...)把所有对象添加相同个数的属性
析构方法，__del__(self)在对象销毁前释放对象自身占用的资源

预置的实例属性：
__dict__绑定存储实例属性的字典
__class__绑定创建此对象的类

isinstance(obj,类或元组)
type(obj)


day18

对象：
行为（实例方法）
属性（实例变量，示例属性）

类（也是对象）

类属性：
　　类属性是类的属性，此属性属于类，不属于此类的实例
作用：
　　通常用来存储该类创建的对象的共有属性
说明：
　　类属性，可以通过该类直接访问
　　类属性可以通过此类的实例直接访问（取值不能赋值）
　　类属性可以通过此类对象的'__class__'属性间接访问
　　实例方法和类方法都属于类的属性
示例见：
　　class_attribute.


类的文档字符串
类内第一个没有赋值给任何变量的字符串为类的文档字符串
类的文档字符串绑定在类的__doc__属性上
示例:
class Dog:
    '这是Dog类的文档字符串'
print(Dog.__doc__)
help(Dog)

类的__slots__列表:
作用:
  限定一个类创建的实例只能有固定的实例属性
  不允许对象添加列表以外的实例属性
  防止用户因错写属性的名称而发生程序错误
说明:
  含有'__slots__'列表的类所创建的实例对象没有'__dict__'属性,
  即此实例不用字典来存储实例属性
示例:
  slots_list.py

类              实例对象
类属性         实例属性
类方法         实例方法

类方法 @classmethod :
类方法是用于描述类的行为的方法,类方法属于类,不属于该类创建的对象

说明:
  类方法需要使用@classmethod装饰器定义
  类方法至少有一个形参,第一个形参用于绑定类,约定写为'cls'
  类和该类的实例都可以调用类方法
  类方法不能访问此类创建的对象的实例属性

对象(实例)              类
object(instance)     class


静态方法 @staticmethod :
静态方法是定义在类的内部的函数,此函数的作用域是类的内部
说明:
  静态方法需要使用@staticmethod 装饰器定义
  静态方法与普通函数定义相同,不需要传入self实例参数和cls类参数
  静态方法只能凭借类或类创建的实例调用
  静态方法不能访问类属性和实例属性


小结:
  函数       操作全局变量和局部变量
  实例方法   操作全局变量,局部变量,实例属性,类属性
  类方法     操作全局变量,局部变量,类属性
  静态方法   操作全局变量,局部变量(作用域在类内)


             面向对象的核心内容

            
继承(inheritance)和派生(derived)
什么是继承和派生
继承是从一个已有的类中派生出新类,新类具有原类的属性和行为
派生是从一个已有类中衍生出新类,在新类上可以添加新的属性和行为
说明:
  继承的目的是延续旧的类功能
  派生的目的是在旧类的基础上添加新的功能
作用:
  用继承派生机制,可以将一些共有功能加在基类中,实现代码的共享,在不改变基类的代码的基础上改变原有类
  的功能
名语:
  基类(base class)/超类(super class)/父类(father class)/
  派生类(derived class)/子类(child class)

单继承
语法:
  class 类名(基类名):
    语句块
说明:
  单继承是指派生类由一个基类衍生出新类
示例见:
  inherit.py


继承说明:
Python3任何类都直接或间接的继承自object类
  object类是一切类的超类
类的__base__属性
  __base__属性用来记录此类的基类

查看全部python3内建类的继承关系的方法:
>>>help(__builtins__)

覆盖 override
什么是覆盖
  覆盖是指在有继承关系的类中,子类中实现了与基类同名的方法,在子类的实例调用该方法时,
  实际调用的是子类中的覆盖版本,这种现象叫覆盖.
作用:
  实现和父类同名,但功能不同的方法
示例见:
override.py
问题:
当覆盖发生时,子类对象能否调用父类中的方法?

子类对象显式调用父类方法的方式:
  基类名.方法名(实例,实际调用传参,...)
  super 函数:
super(cls,obj) 返回绑定超类的实例(要求obj必须为cls类型的实例)
super()        返回绑定超类的实例,等同于:
                super(__class__,实例方法的第一个参数),必须在方式内调用
作用:
  借助super()返回的实例间接调用其父类的覆盖方法


显式调用基类的初始化方法:
  当子类中实现了__init__实例方法时,基类的初始方法并不会被调用.
  如何显式调用父类的初始化方法?
示例见:
  super_init.py


用于类的函数:
  issubclass(cls,class_or_tuple) 判断一个类是否继承自其他的类,如果此类cls是class或tuple
  中的一个类的派生子类,则返回true,否则返回false
示例:
class A:
    pass
class B(A):
    pass
class C(B):
    pass
issubclass(C,B)#true
issubclass(B,C)#false
issubclass(C,A)#true
issubclass(B,(int,float,A))#true
issubclass(bool,int)#true