    列表list
定义：列表是一种容器
     列表是可以被改变的序列
     列表是由一系列特定元素组成的，元素与元素之间可能没有任何的关联关系，/n
     但他们之间有先后顺序关系
创建空列表的字面值：
 L = [] #[]创建空列表
创建非空列表的字面值：
 L = [1,2,3,4]
 ...
 L = [1,2,[3.1,3.2],4]
列表的构造函数list
 list() 生成一个空的列表，等同于[]
 list(iterable) 用可迭代对象创建一个列表
 示例：
 L = list()
 L = list('hello')
 L = list(range(10))
列表的运算
 运算符：
 + += × ×=
 +用于拼接列表
  L = [1,2,3] + [4,5,6]# L = [1,2,3,4,5,6]
  += 用原列表写右侧列表拼接，并用变量绑定列表
  语法： x += 可迭代对象
  示例：
  x = [1,2,3]
  x += [4,5,6]
  x += 'ABC'
  x += range(10,20,3)
  print(x) #[1,2,3,4,5,6,'A','B','C',10,13,16,19]
生成重复的列表：
 x = [1,2] * 3 # x = [1,2,1,2,1,2]
*= 用原列表生成重复的列表，并变量绑定新列表
列表的比较运算：
 运算符：
 < <= > >= == !=
 说明：
 列表的比较规则与字符串的比较规则相同
 列表要求每个元素能依次进行比较，否则会出现类型错误
列表是可迭代对象：
 L = [1,3,5,7]
 for x in L:
     print(x) #打印1357
练习：
 1、输入三行文字，将这三行文字保存在一个列表L中，并打印如：
 请输入：abc
 请输入：1234
 请输入：你好
 生成如下列表：
 ['abc','1234','你好']
 2、写一个程序，让用户输入很多个正整数，当输入负数时结束输入，将用户输入的数存在列表L中，
  打印这个列表
  如：
  请输入：1
  请输入：2
  请输入：3
  请输入：4 
  请输入：-1
  打印：[1,2,3,4] 

列表的in和not in 运算符：
 in 判断一个值是否存在与列表中，如果存在返回true，否则返回false
 not in 返回值与in 相反
练习：
 输入任意行文字，存于列表中，当不输入内容直接回车（即输入空行）时结束输入
 1、打印列表中的内容
 2、计算共输入了几行文字
 3、计算共输入了多少个字符
 4、计算输入的字符中有没有“的”这个字符

列表的索引操作：
 语法：
  列表[整数表达式]
 用法：
  等同于字符串的索引
  索引分正向索引和反向索引，规则与字符串索引规则完全相同
 示例：
 L = [1,2,3,4]
 print(L[1])
 print(L[-1])

列表的索引赋值：
 列表是可变的容器，可以通过索引赋值改变列表中的元素
 语法：
  列表[整数表达式] = 表达式
 示例：
  x = [1,2,3,4]
  x[2] = 3.1
  print(x) = [1,2,3.1,4]

列表的切片slice：
 列表[:]
 列表[::]
 列表的切片取值返回一个列表，规则等同于字符串的切片取值规则
 示例：
  x = [1,2,3,4,5,6,7,8]
  y = x[1::2]  #y = [2,4,6,8]

列表的切片赋值：
 作用：
  可以改变原列表的排列，可以插入和删除数据
  可以用切片改变列表对应的元素的值
 语法：
  列表[切片] = 可迭代对象
 说明：
  切片赋值的赋值运算符的右侧必须是一个可迭代对象
 示例：
  L = [1,1.5,2.5,4]
  L[1:3] = [2,3] #L = [1,2,3,4]

切片的注意事项：
 对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象提供的数据元素的个数一定要
 等于切片切出的段数
 L = [1,2,3,4,5,6]
 L[::2] = 'ABC'  #对的
 L[::2] = 'ABCD' #错的

del 语句  用于删除列表的元素
 语法:
  del 列表[索引或切片]
 示例：
  L = [1,2,3,4,5,6]
  del L[::2] #L = [2,4,6]
  del L[0]  #L =[4,6]
练习：
 已知有列表：
 L = [3,5]
 用索引和切片操作将原列表改为：
 L = [1,2,3,4,5,6]
 将列表反转后删除最后一个元素，再打印此列表
 ...
 print(L)  #[6,5,4,3,2]

python3 中常用于序列的函数：
 len(x) 返回序列的长度
 max(x) 返回序列的最大值元素
 min(x) 返回序列的最小值元素
 sum(x) 返回序列中所有元素的和（元素必须是数值类型）
 any(x) 真值测试，如果序列中其中一个元素值为真值则返回true
 all(x) 真值测试，如果其余列中所有元素都为真值才返回true
 示例：
  L = [8,3,6,2]
  print(len(x)) #4
  print(max(x)) #8
  print(min(x)) #2
  print(sum(x)) #19
  print(any(x)) #true
  print(all(x)) #true
练习：
 写程序，让用户循环输入一些整数，当输入-1时结束输入，将这些整数存于列表L中
 1、打印这个列表中所有的整数（不包括-1）
 2、打印输入的最大数是多少
 3、打印输入的平均数是多少

python3当中常用的列表方法method
 文档参见：
  python
练习：
 写一个程序，让用户输入两个以上的正整数，当输入小于零的数时候结束输入
 （要求不允许输入重复的数）
 1、打印这些数的和
 2、打印这些数中的最大数
 3、打印这些数中的第二大的数
 4、删除最小的一个数

深拷贝 和 浅拷贝
浅拷贝 shallow copy
 浅拷贝是指在复制过程中，只复制一层变量，不会复制深层变量绑定的对象的复制过程
 如：
  L1 = [1,2,[3.1,3.2]]
  L2 = L1.copy()
  L2[2][0] = 3.14
  print(L2)  # L2 = [1,2,[3.14,3.2]]
  print(L1)  # L1 = [1,2,[3.14,3.2]]
深拷贝 deep copy
 依次复制所有依赖的对象
 如：
  import copy #导入复制模块
  L1 = [1,2,[3.1,3.2]]
  L2 = copy.deepcopy(L1)
  L2[2][0] = 3.14
  print(L2)  # L2 = [1,2,[3.14,3.2]]
  print(L1)  # L1 = [1,2,[3.1,3.2]]  #L1不变

练习：
 1、有一些数存于列表中，如：
  L = [1,3,2,1,6,4,2,27,98,82]
  1）将列表中出现的数字存入到另一个列表L2中，要求：
   重复出现多次的数字只在L2列表中保留一份（去重）
  2）将列表中出现两次的数字存于L3列表中，在L3列表中保留一份
 2、计算出100以内的全部素数，将这些素数存于列表L中，最后打印出这些素数
 3、生成前40个斐波那契数（fibonacci）存于列表L中，最后打印出这些数字
  斐波那契数：
  1  1  2  3  5  8  13  21...
  斐波那契数的前两个数是1,从第三个开始，为前两个数的和










