异常(高级)
  回顾异常相关的语句
  try-except
  try-finally
  raise
  assert
  with(语句)


with 语句:
语法:
 with 表达式1[as 变量1],表达式2[as 变量2],...
    语句块
作用:
 使用于对资源进行访问的场合,确保使用过程中不管是否发生异常,都会执行必要的'清理'操作,并释放资源
 如:
 文件使用后自动关闭,线程中锁的自动获取和释放等(线程后面会学)
说明:
 with 语句并不改变异常的状态
示例见:
 with.py

环境管理器
 类内有__enter__和__exit__实例方法的类被称为环境管理器
 能够用with进行管理的对象必须是环境管理器
 __enter__将在进入with语句时被调用并返回由as变量管理的对象
 __exit__将在离开with语句时被调用,且可以用参数来判断在离开with语句时,
 是否有异常发生并做出相应的处理
 示例见:
 with3.py


运算符重载
 让自定义的类生成的对象(实例)能够使用运算符进行操作
作用:
 让自定义的类的实例像内建函数一样进行运算符操作  
 让程序简洁易读
 对自定义的对象将运算符赋予新的运算规则

说明:
 运算符重载的方法个还素已经固定,不可以自定义
 不建议改变运算符原有的含义
算术运算符重载:
方法名                   运算符和表达式         说明
__add__(self,rhs)       self + rhs           加法
__sub__(self,rhs)       self - rhs           减法
__mul__(self,rhs)       self * rhs           乘法
__truediv__(self,rhs)   self / rhs           除法
__floordiv__(self,rhs)  self // rhs          地板除
__mod__(self,rhs)       self % rhs           求余
__pow__(self,rhs)       self ** rhs          幂运算
rhs (right hands side)  右手边
二元运算符的重载格式:
def __xxx__(self,oter):
    ...
示例见:Mynumber.py


反向算术运算符重载:
 当运算符的左侧为内建类型时,右侧为自定义类型进行算术符运算时会出现TypeError错误.
 因无法修改内建类型的代码来实现运算符重载,此时需要使用反向算术运算符的重载来完成重载.
 反向算术运算符重载:
 方法名                   运算符和表达式         说明
__radd__(self,lhs)       self + lhs           加法
__rsub__(self,lhs)       self - lhs           减法
__rmul__(self,lhs)       self * lhs           乘法
__rtruediv__(self,lhs)   self / lhs           除法
__rfloordiv__(self,lhs)  self //lhs          地板除
__rmod__(self,lhs)       self % lhs           求余
__rpow__(self,lhs)       self **lhs          幂运算
lhs(left hands side) 左手边

复合赋值算术运算符重载:
 以复合赋值算术运算符 x += y 为例,此运算符会优先调用x.__iadd__(y)方法,如果没有__iadd__方法时
 会将复合赋值运算拆解为x= x+y,然后调用x = x.__add__(y)方法.
 如果再不存在__add__方法,则会触发TypeError异常
 其他符合赋值算术运算符也且有相同的规则

复合赋值算术运算符重载:
方法名                    运算符和表达式          说明
__iadd__(self,rhs)       self += rhs           加法
__isub__(self,rhs)       self -= rhs           减法
__imul__(self,rhs)       self *= rhs           乘法
__itruediv__(self,rhs)   self /= rhs           除法
__ifloordiv__(self,rhs)  self //= rhs          地板除
__imod__(self,rhs)       self %= rhs           求余
__ipow__(self,rhs)       self **= rhs          幂运算
rhs (right hands side)  右手边


比较运算符重载:
方法名                    运算符和表达式          说明
__lt__(self,rhs)         self <  rhs          小于
__le__(self,rhs)         self <= rhs          小于等于
__gt__(self,rhs)         self >  rhs          大于
__ge__(self,rhs)         self >= rhs          大于等于
__eq__(self,rhs)         self == rhs          等于
__ne__(self,rhs)         self != rhs          不等于


位运算符重载:
方法名                    运算符和表达式          说明
__and__(self,rhs)        self &  rhs           位与(交集)
__or__(self,rhs)         self |  rhs           位或(并集)
__xor__(self,rhs)        self ^  rhs           位异或(对称补集)
__lshift__(self,rhs)     self << rhs           左移
__rshift__(self,rhs)     self >>  rhs          右移


反向位运算符重载:
方法名                    运算符和表达式          说明
__rand__(self,lhs)        lhs &  self           位与(交集)
__ror__(self,lhs)         lhs |  self           位或(并集)
__rxor__(self,lhs)        lhs ^  self           位异或(对称补集)
__rlshift__(self,lhs)     lhs << self           左移
__rrshift__(self,lhs)     lhs >> self           右移


复合赋值位运算符重载:
方法名                    运算符和表达式          说明
__iand__(self,rhs)        self &  rhs           位与(交集)
__ior__(self,rhs)         self |  rhs           位或(并集)
__ixor__(self,rhs)        self ^  rhs           位异或(对称补集)
__ilshift__(self,rhs)     self << rhs           左移
__irshift__(self,rhs)     self >>  rhs          右移



一元运算符重载:
方法名                    运算符和表达式          说明
__neg__(self)        -self                     负号
__pos__(self)        +self                     正号
__invert__(self)     -self                     取反
语法:
 class 类名:
    def __xx__(self):
    ...
示例见:
mylist2.py


in  /  not in 运算符重载
方法名                    运算符和表达式          说明
__contains__(self,e)     r in self             成员运算
注:not in 与 in 共用__contains__方法,返回值取反
示例见:
mylist4.py


索引和切片运算符重载
方法名                    运算符和表达式          说明
__getitem__(self,i)      x = self[i]           索引/切片取值
__setitem__(self,i,v)    self[i] = v           索引/切片赋值
__delitem__(self,i)      del self[i]           删除索引/切片
作用:
 让自定义的类创建的对象支持索引和切片操作
示例见:
mylists_index.py


slice 函数:
作用:
 用于创建一个slice切片对象,此对象存储一个切片的起始值,终止值,步长信息
格式:
 slice(start=None,stop=None,step=None)
slice对象的实例属性:
 s.start  切片的起始值  默认为None
 s.stop   切片的终止值  默认为None
 s.step   切片的步长    默认为None


特性属性 @property
 实现其它语言所拥有的getter 和 setter 功能
作用:
 用来模拟一个属性
 通过@property 装饰器可以对模拟属性的赋值和取值加以控制
示例见:
 property.py


PEP8编码规范
文件参见:python_base_docs_heml/PEP8编码规范.HTML