函数变量
　函数名是变量，它在创建函数时绑定一个函数
示例：
def f1():
    print('f1函数被调用＇)
f2 = f1 #<--－这里没有用括号调用,f2变量和f1变量同时绑定同一个函数对象
f2() #f1函数被调用
f1() #f1函数被调用
示例２：(交换变量的绑定关系)
def f1():
    print('f1')
def f2():
    print('f2')
f1,f2 = f2,f1
f1() #f2
f2() #f1

一个函数可以作为另一个函数的实参传递
示例见：

函数可以作为另一个函数的返回值
示例见：
练习：（公式计算器）
　写一个公式计算器的解释执行器
　已知有如下一些函数：
　def myadd(x,y)
    return x
  def mysub(x,y):
    return x-y
  def mysum(x,y):
    return x*y
再自己写一个函数
　def get_func(s):
......#此处自己实现
  此函数传入一个字符串＇加＇或＇＋＇则返回myadd函数
  此函数传入一个字符串＇乘＇或＇*'则返回mymul函数
  在程序主函数中的程序如下：
  def main():
    while True:
        s = input('请输入计算公式：＇)＃如１０加２０
        L = s.split() #L = ['10','加','20']
        a = int(L[0])
        b = int(L[2])
        fn = get_func(L[1])
        print('结果是：',fn(a,b)) #结果是：３０

函数的嵌套定义
　函数嵌套定义是指一个函数里调用def 语句来创建其他函数的情况

python的作用域
　作用域也叫名字空间，是访问变量时查找变量名的范围空间
python　中的四大作用域：
作用域　　　　　　　　　　　　　　英文解释　　　　　      英文简写　
局部作用域　　　　　　　　　local(function)           L
外部嵌套函数作用域　　　　　enclosing function local  E
函数定义所有模块的作用域　　global(module)            G
python内置模块的作用域    builtin(python)           B

变量名的查找规则
　在访问变量时，先查找本地变量，然后是包裹此函数外部的函数内部的变量，之后是全局变量，最后是内置变量
　　即：L--->E--->G--->B
　在默认的情况下，变量名赋值会创建或者改变本地作用域的变量

global 语句
作用：
　告诉解释器，global语句声明的一个或多个变量，这些变量的作用域为模块级的作用域，也称作全局作用域
说明：
　global全局声明将赋值变量映射到模块文件内部的作用域
语法：
　global　变量１，变量２...
示例：
　global a,b,c
　global d
global说明：
　全局变量如果要在函数内部被赋值，则必须经过全局声明（否则会被认为是局部变量）
　全局变量在函数内部不经过声明便可以直接访问（取值，但不能通过赋值改变绑定关系）
　不能先声明局部变量，再用global声明为全局变量，此做法不符合规则
　global变量列表里的变量名不能出现在函数的形参列表里．
示例见：
　global.py

nonlocal 语句:
　作用：
告诉解释器，Nonlocal声明的变量不是局部变量，也不是全局变量，而是外部嵌套函数内部的变量
　语法：
nonlocal　变量名１，变量名２...
　说明：
nonlocal语句只能在被嵌套函数的内部进行使用
对nonlocal变量进行赋值将对外部嵌套函数作用域内的变量进行操作
当有两层或两层以上函数嵌套时，访问nonlocal变量只对最近一层的变量进行操作
nonlocal语句的变量列表里的变量名，不能出现在形参列表里

def语句的作用是：
　创建函数，然后用函数名绑定这个语句块

创建函数的第二种方式------lambda表达式

lambda表达式(又称匿名函数)
作用：
　创建一个匿名函数对象
　同del类似，但不提供函数名
语法格式：
　lambda [函数的形参表达式]: 表达式
注：[]代表里面的内容可省略
语法说明：
　lambda表达式创建的函数只能包含一条表达式
　lambda比函数简单且可以随时创建和销毁，有利于减少程序的偶和度
练习：
　写一个lambda表达式
　fx = lambda n:...
　此表达式创建的函数判断n这个数的２次方＋１能否被５整除，如果能整除返回true,否则返回false
 print(fx(3)) #True
 print(fx(4)) #False
 2,写一个lambda表达式来创建函数，此函数返回两个形参的最大值
 如：
 def mymax(x,y):
 ......
 改写后
 mymax = lambda...
 测试代码：
 print(mymax(100,200)) #200

 看懂下面的程序在做什么？
 def fx(f,x,y):
    print(f(x,y))
 
 fx((lambda a,b:a+b),100,200)
 fx((lambda a,b:a**b),3,4)

练习：
1,　写一个函数mysum(x)来计算
１＋２＋３+4+...+x的和
要求：不允许调用sum函数
如：
　print(mysum(100)) #5050
2,写一个函数myfac(n)来计算n!(n的阶乘)
　n! = 1*2*3*4*...*n
 如：
 　print(myfac(5))#120
3,写一个函数myfun(n)计算：
１＋２＊＊２＋３＊＊３＋．．．＋n**n的和
如：
print(myfun(3))  #32
4,写程序打印杨辉三解（只打印６层）
５，实现带界面的＜＜学生信息管理程序＞＞
操作界面如下：
＋－－－－－－－－－－－－－－－－－－－－＋
｜１）添加学生信息　　　　　　　　　　　　｜
｜２）显示学生信息　　　　　　　　　　　　｜
｜３）删除学生信息　　　　　　　　　　　　｜
｜４）修改学生成绩　　　　　　　　　　　　｜
＋－－－－－－－－－－－－－－－－－－－－＋