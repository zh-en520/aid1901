课程:MySQL关系型数据库
进度:day3

上次内容回顾

1. 修改数据
  update orders 
  set status = 2
  where order_id = '201801010001';
2. 删除
  delete from orders 
  where order_id = '201801010001';
3. 查询
1）运算符
  - 比较运算符：>,<,>=,<=,<>(!=),=
  - 逻辑运算符：and, or
  - 范围比较：in, not in
              between...and...
  - 模糊查询：like '%D%'
  - 空、非空：is null, is not null
  
2）查询子句
  - order by : 排序
    select * from orders
    order by amt asc;  -- desc	
  - limit：限制查询结果显示笔数
    select * from orders limit 3;
	select * from orders limit 3,5;
  - distinct：去重
  
3）聚合函数：对数据进行总结
  - max/min: 求最大、最小值
  - avg: 求平均值
  - sum: 求和
  - count: 统计笔数
    select count(*) from orders
	where status = 2;
	
4）group by: 分组
   select status, count(*)
   from orders
   group by status;
   
5）having: 对分组聚合结果过滤
   select status, count(*)
   from orders
   group by status
   having status is not null;
   
今天的内容

一、高级查询
1. 子查询
1）什么是子查询：一个查询语句中嵌套
   了另一个查询，也叫嵌套查询。如：
   select * from orders where amt >
   (select avg(amt) from orders);
   等价于：
   select * from orders 
   where amt > 444.55;--444.55是平均值

   说明：
     - 括号中的部分称为子查询
	 - 子查询返回一个结果集，结果集
	   的类型要和外层查询相匹配
	 - 先执行子查询，将子查询结果
	   作为外层查询的条件或输入
	 - 子查询只执行一遍
	 
2）什么情况下使用子查询：当一个查询
   无法实现（或实现不方便）使用子查询

3）单表子查询   
   select * from orders where amt >
   (select avg(amt) from orders);

4）多表子查询：子查询和外层查询不是
   同一个表
  - 语法：
    select 字段列表 from 表A where 
	(select 字段列表 from 表B [条件])
  
  - 示例：查询所有下过订单的客户的
    编号、姓名、电话
	select cust_id,cust_name,tel_no
	from customer where cust_id in
	(select cust_id from orders);
    -- in改成not in就是查询没有下过
	-- 单的客户
  - 示例：查询所有订单状态为1的订单
    所对应的客户的编号、姓名、电话
	select cust_id,cust_name,tel_no
	from customer where cust_id in
	(select cust_id from orders
	 where status = 1);
	 -- 等价于
	 select cust_id,cust_name,tel_no
	from customer where cust_id in
	('C0003','C0004');
	
2. 联合查询
1）什么是联合查询(连接查询)：将多个
   表的数据连接起来，得到一个新的数
   剧集
2）什么情况下使用联合查询：当从一个
   表中无法查询到所有数据时使用
   (前提是几个表之间有数据关联性) 
   
3）笛卡尔积：理论基础
  - 什么是笛卡尔积：两个集合的乘积，
    表示两个集合中的元素两两组合
	产生的新集合
	
	示例：参考PPT
	
  - 去掉笛卡尔积中没有意义（或不可能）
    的组合，就是关系（Relationship）

4）内连接: 在两个表之间，利用某一列
   的值进行比较，如果条件匹配，就出
   现在查询结果中，如果没有匹配到，
   就丢弃不显示，这种连接称为内连接
   
   第一种实现方法：
   select a.order_id,a.cust_id,
          a.amt, b.cust_name,
		  b.tel_no
   from orders a, customer b
   where a.cust_id = b.cust_id;
   
   第二中实现方式：利用inner join
   select a.order_id,a.cust_id,
          a.amt, b.cust_name,
		  b.tel_no
   from orders a INNER JOIN customer b
   on a.cust_id = b.cust_id;
   
5）外连接
  - 什么是外连接：联合查询时，没有关联
    到的数据也显示，就叫外连接。分为
	左连接、右连接
	  左连接：左表为基准表，数据全部
	          显示，右表数据去关联，
			  没有关联则显示NULL
	  右连接：右表为基准表，数据全部
	          显示，左表进行关联，
			  没有关联则显示NULL
  - 左连接的实现：left join
    select a.order_id, a.cust_id,
	       a.amt, b.cust_name,
		   b.tel_no
	from orders a left join customer b
	on a.cust_id = b.cust_id;
	
  - 右连接的实现：right join
    select a.order_id, a.cust_id,
	       a.amt, b.cust_name,
		   b.tel_no
	from orders a right join customer b
	on a.cust_id = b.cust_id;
	
二、表结构调整
1）添加字段
  - 语法：
    添加到最后
	alter table 表名 add 字段 类型
	
	添加到第一个位置
	alter table 表名 add 字段 类型 first
	
	添加到某个字段后面
	alter table 表名 add 字段 类型 
	after 字段名
	
  - 示例：
    create table student(
	  stu_no varchar(32),
	  stu_name varchar(128)
	);
	alter table student add age int;
	alter table student add id int first;
	alter table student add 
	  tel_no varchar(32) after stu_name;
	
2）修改字段
  - 语法
    修改类型
	alter table 表名 modify 字段 类型
	
	修改字段名称
	alter table 表名 
	change 旧字段名 新字段名 类型
  - 示例
    示例一：修改学生姓名长度为64
    alter table student modify 
	stu_name varchar(64);
	
	示例二：修改age为stu_age
	alter table student 
	change age stu_age int;

3）删除字段
  - 语法：alter table 表名 drop 字段名
  - 示例：删除id字段
    alter table student drop id;
  
三、约束
1. 概述
1）什么是约束(constraint):保证数据完整性、
   一致性、正确性的规则
2）约束的作用：可以限制无效数据进入到数
   据库中，在数据库层面上提供“安检”
3）分类：
  - 非空约束：字段值不能为空
  - 唯一约束：字段值不能重复
  - 主键约束：字段作为主键，非空、唯一
  - 默认值：未填写值时，自动填写默认值
  - 自动增加：字段值自动增加
  - 外键约束

2. 定义和使用约束
1）非空约束(Not Null):字段的值不能为空
  - 定义非空约束：
    字段名 类型  not null
  - 示例：
    create table t1(
	  id varchar(32) not null,
	  name varchar(32)
	);
	insert into t1 values('0001','Jerry');
	insert into t1 values(NULL, 'Tom');
	-- 第二笔违反非空约束，插入失败
	
2）唯一约束(Unique):字段的不能重复
  - 定义唯一约束：
    字段名  数据类型  unique
  - 示例：
    create table t2(
	  id varchar(4) unique, -- 唯一约束
	  name varchar(32)
	);
	insert into t2 values('0001','Tom');
	insert into t2 values('0001','Jerry');
	-- 第二笔违反唯一性约束
3）主键(Primary Key，简写PK):用来唯一
  标识一笔记录，要求非空、唯一
  - 主键特性：
    主键和一笔记录有唯一的对应关系
	一个表最多只能有一个主键
	可以单个字段、多个字段共同构成主键
	（注意：不是多个主键）
  - 语法：
    字段名 类型 Primary Key
  - 示例：
    create table t3(
	  id varchar(4) primary key,-- 主键
	  name varchar(32)
	);
    insert into t3 values('0001','Tom');
	insert into t3 values('0001','Jerry');
	insert into t3 values(NULL,'Jerry');
	-- 第二笔违反唯一、第三笔违反非空约束

4）默认值(Default)：指定某列的默认值，
   如果插入时没有为该字段赋值，系统会
   自动为该字段填写默认值
  - 语法：
    字段名 数据类型  default 默认值
  - 示例
    create table t4(
	  id varchar(4),
	  status int default 0
	);
	insert into t4 values('0001', 1);
	insert into t4(id) values('0002');
	-- 第二行status未赋值，填默认值0

5）自增长(auto_increment):指定字段的值
   自动增长，插入时不需要赋值(如果自己
   赋值，则需要保证不重复),系统在最大值
   基础上自动加1。字段添加自增长属性时，
   必须设置为主键或添加唯一约束
  - 语法：字段 类型 auto_increment
  - 示例：
    create table t5(
	  id int primary key auto_increment,
	  name varchar(32)
    );	
	insert into t5 values(NULL,'Tom');
	insert into t5 values(NULL,'Jerry');
	insert into t5 values(NULL,'Dekie');

6）外键约束(Foreign Key, 简写FK)
  - 什么是外键：是一种约束，添加外键的
    字段，在当前表不是主键，在另一个表
	是主键
  - 外键的约束作用：当一个字段被设置成
    外键时，另一个表中被参照的数据必须
	存在，这个特性被称为“参照完整性”
	
	示例：参考PPT
	
  - 添加外键的影响
    删除时：被参照的数据不能被删除
	插入时：如果参照的数据不存在，
	        则无法插入
			
  - 使用外键的条件
    表的存储引擎必须为InnoDB
	被参照字段在另外表中必须是主键
	当前表和被参照表字段类型一致
	
  - 语法：
    constraint 外键名称 
	foreign key(当前表字段名)
	references 被参照表(被参照字段)

  - 示例：创建课程信息表(course),教师
    信息表(teacher)，在教师信息表的
	课程编号上添加外键约束
	第一步：创建课程信息表
	  create table course(
	    course_id varchar(4) primary key,
		name varchar(32)
	  ) default charset=utf8;
	  create table teacher(
	    id int auto_increment primary key,
		name varchar(32),
		course_id varchar(4),
		
		constraint fk_course 
		foreign key(course_id)
		references course(course_id)
	  )default charset=utf8;
	  
	第二步：插入课程信息
	  insert into course
	  values('C001', 'Python编程基础');
	          
	第三步：插入教师信息验证
 	  insert into teacher
	  values(NULL, '张三', 'C001'); -- OK 
	  
	  -- 错误，C002课程不存在
 	  insert into teacher
	  values(NULL, '张三', 'C002'); 
	  
	  -- 删除C001课程，报错，因为C001被参照了
	  delete from course where course_id='C001';
	  
四、数据导出、导入

1. 概述
1）导出：库 导出 到 文件
2）导入：从文件 导入 到 库中
   示例：见PPT
	  



















