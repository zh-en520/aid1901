课程:Mysql关系型数据库
一.主要内容
    (基本概念)
    1.数据库相关概念
    (基本使用)
    2.Mysql安装和配置
    3.库管理
    4.表管理
    5.结构化查询
    (高效使用)
    6.数据约束
    7.数据的导入导出
    8.权限管理
    9.数据库事物
    10.存储引擎
    (设计)
    11.E-R关系图(概念模型)
    (应用)
    12.Python如何访问数据库
二.课程总体目标
    1.理解/掌握关系数据库基本理论,概念
    2.熟练使用Mysql(安装,配置,管理)
    3.掌握库,表管理(创建,修改,删除)
    4.熟练掌握SQL语句
    5.掌握基本的数据库日常管理(权限管理,备份,恢复)
    6.掌握E-R设计方法,工具
    7.熟练使用Python访问数据库
三.课程特点
    1.入门容易,提高难
    2.知识点多,小,零散
    3.无法看见内层代码
四.为什么要学数据库
    1.数据库是必备知识
    2.软件没有数据路就不能实现功能




数据库的基本概念

一.什么是数据库
    1.数据库(Database):根据某种模型,组织,存取数据的软硬件集合.
      简单来说,就是集中存放数据的仓库
    2.数据库管理系统(Database Management System,简称DBMS):
      -定义:位于操作系统和用户之间的/专门进行数据管理的软件系统
      -常见的DBMS:Oracle,MySQL,DB2,SQL Server
    3.数据库系统:一般性统称,包含DBMS,软硬件设备,应用程序,角色(DBA)

二.数据库的应用场合
    -银行存储客户信息,账户信息,交易信息
    -电商网站商品,订单,客户信息
    -仓库管理系统物品信息,数量,位置
    -新闻系统数据库
    -论文网站收录的文献

三.数据库和程序的关系

四.业界主流数据库及特点
------------------------------------
    厂商      DBMS        特点
------------------------------------
    Oracle  Oracle     安全,高效,稳定
            MySQL      开源,高效

    微软     SQL Server 封闭,高效

    IBM     DB2        大型数据库
                       市场份额不大

    Sybase  Sybase     市场份额小
    ....
-------------------------------------

五.数据管理的三个阶段

    1.人工管理--早期阶段
      数据依附于程序,不单独管理,数据和程序是不可分割的
      缺点:数据不能共享

    2.文件管理--第二阶段
      数据存文件
      优点:可以持久化保存,数据是独立可共享的
      缺点:速度慢,数据的联系弱

    3.数据库管理--第三阶段
      专门用一套软件管理数据
      优点:可以持久保存,数据独立,可共享,数据联系加强
      缺点:需要付出额外的成本(软硬件成本,人力成本)

六.数据库的概念模型

    1.层次模型
    2.网状模型
    3.关系模型
      -当前主流数据库模型
      -用关系(二维表)表示数据之间的联系
      -特点:a.建立在严格的数据理论基础上
           b.概念单一,简单,结构清晰
           c.能够很好保证数据一致性,完整性
    4.非关系模型

七.关系模型的基本概念(重点)******************************************

    1.关系(Relationship)
      -由行,列构成的规范的二维表
      (每一列都不可再分,每行次序不重要)
      -行(记录)描述一个实体(事物),列描述实体的某个属性(字段)
    2.实体(Entry):现实中可以区分的事物
    3.元组(Tuple):表中的一行称为一个元组,也叫一条记录,表示一个实体
    4.属性(Attribute):表中的一列称为一个属性,描述实体的某个特征,也称为字段
    5.键(Key):关系中唯一区分不同实和性或属性组合
    6.主键(Primary Key):多个键中选取一个作为主键,用作逻辑上唯一区分实体
      -要求:非空,唯一
    7.关系型数据库:使用关系模型的数据库

--------------------------------------------------------------------
正文内容

一.MySQL

    1.MySQL的优点:
      -开源,成本低;
      -体积小,速度快;
      -跨平台(操作系统):支持windows,unix,linux;
      -使用的是C,C++开发语言,可移植性强;
      -支持丰富的开发语言:C,C++,Python,Jave,PHP,.NET......
    
    2.MySQL主要版本信息
      -社区版(Community Server):开源免费不提供官方技术支持,适合于中小企业,学习使用;
      -企业版(Enterprise Edition):付费,可短期免费使用;
      -集群版(Cluster):开源免费;
      -高级集群版(Cluster CGE):付费集群版;
a
二.安装与配置

    1.windows系统安装
      第一步:下载安装文件
      MySQL5.7版本

      第二步:安装
      -选组件:serve only或developer default
      -设置端口:保持默认值3306
      -设置root密码(该密码需要记住)
      -添加测试用户(记住名称和密码)

      验证:
      -我的电脑->服务->程序和服务->服务找到MySQL,右键->属性中查看状态
      -查看3306端口:
       netstat -an | find 3306

    2.在Unbuntu系统安装
      第一步:
      sudo apt-get install mysql-server
      sudo apt-get install mysql-client
      sudo apt-get install libmysqlclient-dev

      第二步:
      -查看端口:netstat -an | grep 3306
      -通过脚本查看服务状态:
       sudo /etc/init.d/mysql status
       status:查看服务状态
       stop:停止服务
       start:启动服务
       restart:重启服务(先停止,再启动)
       sudo ls /var/lib/mysql
       ls /etc/mysql目录下的配置文件

       第三步:
       MySQL的重要目录和文件
       /usr/bin           命令,可执行文件
       /var/lib/mysql     数据存储目录
       /etc/mysql         配置文件
       /etc/init.d/mysql  管理脚本文件
       /usr/share/mysql   错误消息,字符集,示例配置文件

    第四步:
    -登录:
     指令:mysqld -hlocalhost -uroot -p123456
     参数:-hlocalhost:指定要连接的服务器,如果不输则连localhost
         -uroot:登录使用的用户名
         -p123456:登录使用的密码
     *退出:exit或quit
     清屏:system clear

三.SQL语言简介

    1.SQL:Structure Query Language,用户完成数据库管理,数据增删改查
    
    2.使用规则:
      每条SQL语句必须以分号结束;
      不区分大小写;
      不支持TAB键自动补齐;
      使用\c可废弃当前写错的SQL命令

四.库管理

    1.查看库:show databases;

    2.进入,切换到某个库:
      use 库名;

    3.查看库中的表:show tables;

    4.创建库:
      -命令格式:
       create databases 库名
       [default charset=字符集] 
      -示例:创建eshop库
       create database eshop
       default charset=utf8;
    
      -库的命名规则
       可以使用数字,字母,_,不能全是数字;
       库名区分大小写;
       库名需保持唯一;
       避开关键字,特殊字符;

    5.查看库:
      -查看当前库:select database();
      -查看创建库的语句:
       show create database 库名;
    
    6.删除库:
      drop database 库名;

五.表管理

    1.创建表
      -建表首先要进入某个库;
      -建表语法:
       create table 表名称(
           字段1 类型(长度) 约束,
           字段2 类型(长度) 约束,
           ......
       )[default charset=字符集];
      -示例:
       创建订单表(orders),包含订单编号,客户名称字段
       create table orders(
           order_id varchar(32),
           cust_name varchar(128)
       ) default charset=utf8;

    2.查看表结构
      -desc 表名
       示例:查看orders表结构
       desc orders;

      -查看建表语句:show create table 表名
       示例:查看orders建表语句
       show create table orders;

    3.删除表
      -语法:drop table 表名;
      -示例:删除orders表
       drop table orders;

    4.示例:重新创建orders表
        create table orders(
            order_id varchar(32),-- 订单编号
            cust_id varchar(32),-- 客户编号
            order_date datetime,-- 下单时间
            status int,-- 订单状态
            products_num int,-- 商品数量
            amt decimal(16,2) -- 订单金额,浮点型
                              -- 最大16位,2位小数
        );default charset=utf8;

六.表记录管理

    1.插入数据
      -所有字段都插值
      insert into orders values
      ('201801010001','C0001',now(),
      1,1,100.00);
      *验证语句:select * from 表名
    
      说明:
      -没有指定字段,表示所有字段都要赋值;
      -字段值列表中,字段数目,顺序,类型要和表结构定义的一致;
      -now()表示取系统当前日期时间;
      -字符串类型必须要单引号引起来,日期时间,数值类型不用单引号;
      -空值用NULL表示;

    2.指定字段插入
      -语法:
       insert into 表名(字段列表)
       values(值列表);
    
      -示例:向订单表插入一笔数据,只插入订单编号,客户编号两个字段值
       insert into orders(order_id,cust_id)
       values('201801010002','C0002');

    3.指定字段插入
      -语法:
       insert into 表名(字段列表) values
       (值列表1),
       (值列表2),
       ...;

      -示例:
      insert into orders values
      ('201801010005','C0005',now(),1,1,200),
      ('201801010006','C0006',now(),1,3,400);

    4.简单查询
      -语法:
      select * from 表名 [where 查询条件];
      select 字段1,字段2 from 表名
      [where 查询条件];

      -示例:
       -查询所有数据,所有字段
        select * from orders;

       -查询订单编号,金额
        select order_id,amt from orders;

       -查询指定字段,给每个字段起别名
        select order_id "订单编号",
               amt "订单总金额",
               order_date "日期"
            from orders;

       -带条件的查询:
        select * from orders
        where order_id = '201801010001';
    
       -带多个条件的查询:
        select * from orders
        where order_id = '201801010001'
        and/or status = 1;
